"use strict";(self.webpackChunkai_code_assistant=self.webpackChunkai_code_assistant||[]).push([[24],{24:(e,t,o)=>{o.r(t),o.d(t,{default:()=>c});var a=o(209),n=o(123),i=o(141);const r=o.n(i)().create({baseURL:"https://generativelanguage.googleapis.com",params:{key:"AIzaSyDKc0WJ4DuBYxReqAxB2SUNsJ8yMnrt5hU"},headers:{"Content-Type":"application/json"}}),s=new class{async generateCode(e){try{return(await r.post("/v1beta/models/gemini-2.0-flash:generateContent",{contents:[{parts:[{text:`Generate code for: ${e}`}]}],generationConfig:{maxOutputTokens:500,temperature:.7}})).data.candidates[0].content.parts[0].text||"No code generated"}catch(e){throw console.error("Error generating code:",e),e}}async explainCode(e){try{return(await r.post("/v1beta/models/gemini-2.0-flash:generateContent",{contents:[{parts:[{text:`Explain this code:\n${e}`}]}],generationConfig:{maxOutputTokens:500,temperature:.5}})).data.candidates[0].content.parts[0].text||"No explanation generated"}catch(e){throw console.error("Error explaining code:",e),e}}},c={id:"ai-code-assistant:plugin",description:"A JupyterLab extension with AI-powered code assistant.",autoStart:!0,requires:[a.ICommandPalette,n.INotebookTracker],activate:(e,t,o)=>{console.log("JupyterLab extension ai-code-assistant is activated!");const n="ai:generate-code";e.commands.addCommand(n,{label:"Generate Code from Description",execute:()=>{const e=o.currentWidget;e?async function(e){const t=e.content.activeCell;if(!t||"code"!==t.model.type)return void await(0,a.showDialog)({title:"Error",body:"Please select a code cell.",buttons:[a.Dialog.okButton()]});const o=await a.InputDialog.getText({title:"Generate Code from Description",placeholder:"Enter your description"});if(o.button.accept&&o.value){const e=o.value;try{const o=await s.generateCode(e);t.model.sharedModel.setSource(o)}catch(e){await(0,a.showDialog)({title:"Error",body:`Failed to generate code: ${e.message}`,buttons:[a.Dialog.okButton()]})}}}(e):console.warn("No active notebook found.")}}),t.addItem({command:n,category:"AI Assistant"});const i="ai:explain-code";e.commands.addCommand(i,{label:"Explain Selected Code",execute:()=>{const e=o.currentWidget;e?async function(e){const t=e.content,o=t.activeCell;if(!o||"code"!==o.model.type)return void await(0,a.showDialog)({title:"Error",body:"Please select a code cell.",buttons:[a.Dialog.okButton()]});if(!o.editor)return void await(0,a.showDialog)({title:"Error",body:"No editor available for the selected cell.",buttons:[a.Dialog.okButton()]});const n=o.editor,i=n.editor.state.selection.main,r=i.from!==i.to?n.editor.state.sliceDoc(i.from,i.to):"";if(r)try{const e=await s.explainCode(r);if(!t.model)return void await(0,a.showDialog)({title:"Error",body:"Notebook model is not available.",buttons:[a.Dialog.okButton()]});t.model.sharedModel.insertCell(t.activeCellIndex+1,{cell_type:"markdown",source:e})}catch(e){await(0,a.showDialog)({title:"Error",body:`Failed to explain code: ${e.message}`,buttons:[a.Dialog.okButton()]})}else await(0,a.showDialog)({title:"Error",body:"Please select some code to explain.",buttons:[a.Dialog.okButton()]})}(e):console.warn("No active notebook found.")}}),t.addItem({command:i,category:"AI Assistant"})}}}}]);